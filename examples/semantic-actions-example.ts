/**
 * Semantic Actions Example
 * 
 * Comprehensive examples of all semantic actions available in The Architech.
 * This demonstrates the new three-layer architecture in action.
 */

import { Blueprint } from '../src/types/adapter.js';

export const semanticActionsExample: Blueprint = {
  name: 'Semantic Actions Example',
  description: 'Comprehensive example of all semantic actions',
  version: '1.0.0',
  actions: [
    // 1. CREATE_FILE - Create new files
    {
      type: 'CREATE_FILE',
      path: 'src/components/Button.tsx',
      content: `import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary';
}

export const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  variant = 'primary' 
}) => {
  return (
    <button 
      className={\`btn btn-\${variant}\`}
      onClick={onClick}
    >
      {children}
    </button>
  );
};`
    },

    // 2. INSTALL_PACKAGES - Add dependencies
    {
      type: 'INSTALL_PACKAGES',
      packages: ['react', 'react-dom', '@types/react', '@types/react-dom'],
      isDev: false
    },
    {
      type: 'INSTALL_PACKAGES',
      packages: ['typescript', '@types/node', 'ts-node'],
      isDev: true
    },

    // 3. ADD_SCRIPT - Add npm scripts
    {
      type: 'ADD_SCRIPT',
      name: 'build',
      command: 'tsc && next build'
    },
    {
      type: 'ADD_SCRIPT',
      name: 'dev',
      command: 'next dev'
    },
    {
      type: 'ADD_SCRIPT',
      name: 'test',
      command: 'vitest run'
    },

    // 4. ADD_ENV_VAR - Add environment variables
    {
      type: 'ADD_ENV_VAR',
      key: 'DATABASE_URL',
      value: 'postgresql://localhost:5432/mydb',
      description: 'Database connection string'
    },
    {
      type: 'ADD_ENV_VAR',
      key: 'NEXTAUTH_SECRET',
      value: 'your-secret-key-here',
      description: 'NextAuth.js secret key'
    },
    {
      type: 'ADD_ENV_VAR',
      key: 'NODE_ENV',
      value: 'development',
      description: 'Application environment'
    },

    // 5. ADD_TS_IMPORT - Add TypeScript imports
    {
      type: 'ADD_TS_IMPORT',
      path: 'src/lib/auth.ts',
      imports: [
        {
          moduleSpecifier: 'next-auth',
          namedImports: ['NextAuthOptions', 'NextAuth']
        },
        {
          moduleSpecifier: 'next-auth/providers/credentials',
          defaultImport: 'CredentialsProvider'
        }
      ]
    },

    // 6. MERGE_JSON - Merge JSON configuration files
    {
      type: 'MERGE_JSON',
      path: 'tsconfig.json',
      content: {
        compilerOptions: {
          strict: true,
          target: 'ES2020',
          lib: ['dom', 'dom.iterable', 'es6'],
          allowJs: true,
          skipLibCheck: true,
          esModuleInterop: true,
          allowSyntheticDefaultImports: true,
          forceConsistentCasingInFileNames: true,
          moduleResolution: 'node',
          resolveJsonModule: true,
          isolatedModules: true,
          noEmit: true,
          jsx: 'preserve'
        },
        include: ['next-env.d.ts', '**/*.ts', '**/*.tsx'],
        exclude: ['node_modules']
      }
    },
    {
      type: 'MERGE_JSON',
      path: 'next.config.js',
      content: {
        experimental: {
          appDir: true
        },
        images: {
          domains: ['example.com']
        }
      }
    },

    // 7. APPEND_TO_FILE - Append content to existing files
    {
      type: 'APPEND_TO_FILE',
      path: 'README.md',
      content: `

## Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Run the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Open [http://localhost:3000](http://localhost:3000) in your browser.

## Available Scripts

- \`npm run dev\` - Start development server
- \`npm run build\` - Build for production
- \`npm run test\` - Run tests
`
    },

    // 8. PREPEND_TO_FILE - Prepend content to existing files
    {
      type: 'PREPEND_TO_FILE',
      path: 'src/index.ts',
      content: `// Generated by The Architech
// This file was automatically created and should not be edited manually

`
    },

    // 9. ENHANCE_FILE - Complex file modifications
    {
      type: 'ENHANCE_FILE',
      path: 'next.config.js',
      modifier: 'nextjs-config-wrapper',
      params: {
        withSentry: true,
        withAnalytics: false,
        withBundleAnalyzer: true
      },
      fallback: 'skip'
    },

    // 10. RUN_COMMAND - Execute CLI commands
    {
      type: 'RUN_COMMAND',
      command: 'npx shadcn-ui@latest init',
      workingDir: './src'
    },
    {
      type: 'RUN_COMMAND',
      command: 'npx shadcn-ui@latest add button card input',
      workingDir: './src'
    }
  ]
};

// Example with template variables
export const templateExample: Blueprint = {
  name: 'Template Variables Example',
  description: 'Shows how to use template variables in actions',
  version: '1.0.0',
  actions: [
    {
      type: 'CREATE_FILE',
      path: 'src/components/{{componentName}}.tsx',
      content: `import React from 'react';

interface {{componentName}}Props {
  // Props for {{componentName}}
}

export const {{componentName}}: React.FC<{{componentName}}Props> = () => {
  return (
    <div>
      <h1>{{componentName}} Component</h1>
      <p>This component was generated for project: {{project.name}}</p>
    </div>
  );
};`
    },
    {
      type: 'INSTALL_PACKAGES',
      packages: ['{{packageName}}@latest'],
      condition: '{{module.parameters.includePackage}}'
    }
  ]
};

// Example with conditional execution
export const conditionalExample: Blueprint = {
  name: 'Conditional Execution Example',
  description: 'Shows how to use conditional execution',
  version: '1.0.0',
  actions: [
    {
      type: 'INSTALL_PACKAGES',
      packages: ['@types/node'],
      condition: '{{module.parameters.typescript}}'
    },
    {
      type: 'CREATE_FILE',
      path: 'src/lib/database.ts',
      content: 'export const db = "database connection";',
      condition: '{{module.parameters.database}}'
    },
    {
      type: 'ADD_ENV_VAR',
      key: 'API_KEY',
      value: 'your-api-key',
      condition: '{{module.parameters.api}}'
    }
  ]
};

// Migration example: Before vs After
export const migrationExample = {
  // ❌ OLD WAY (ADD_CONTENT)
  old: {
    type: 'ADD_CONTENT',
    target: 'package.json',
    content: '{"dependencies": {"react": "^18.0.0", "next": "^13.0.0"}}',
    strategy: 'merge'
  },

  // ✅ NEW WAY (Semantic Actions)
  new: [
    {
      type: 'INSTALL_PACKAGES',
      packages: ['react@^18.0.0', 'next@^13.0.0']
    }
  ]
};