/**
 * Drizzle Generator
 * 
 * Handles all file generation logic for the Drizzle plugin.
 * Separated from the main plugin for better organization.
 */

import { DatabasePluginConfig, DatabaseProvider, ORMOption, NeonConfig, SupabaseConfig, MongoDBConfig, DatabaseFeature } from '../../../../types/plugin-interfaces.js';

/**
 * Defines a file artifact to be generated, containing its relative path and content.
 */
export interface GeneratedFile {
    path: string;
    content: string;
}

export class DrizzleGenerator {
  /**
   * Generate all necessary files for the Drizzle plugin.
   * @returns An array of GeneratedFile objects.
   */
  generateAllFiles(config: DatabasePluginConfig): GeneratedFile[] {
    return [
      this.generateDrizzleConfig(config),
      this.generateSchemaFile(config),
      this.generateConnectionFile(config),
      this.generateUnifiedInterface(config),
      this.generateInitialMigration(config)
    ];
  }

  /**
   * Generate Drizzle configuration file content.
   */
  generateDrizzleConfig(config: DatabasePluginConfig): GeneratedFile {
    return {
        path: 'drizzle.config.ts', // Relative path
        content: this.generateDrizzleConfigContent(config)
    };
  }

  /**
   * Generate database schema file content.
   */
  generateSchemaFile(config: DatabasePluginConfig): GeneratedFile {
    return {
        path: 'db/schema.ts', // Relative path to be resolved by BasePlugin
        content: this.generateSchemaContent(config)
    };
  }

  /**
   * Generate database connection file content.
   */
  generateConnectionFile(config: DatabasePluginConfig): GeneratedFile {
    return {
        path: 'db/connection.ts',
        content: this.generateConnectionContent(config)
    };
  }

  /**
   * Generate unified interface file content.
   */
  generateUnifiedInterface(config: DatabasePluginConfig): GeneratedFile {
    return {
        path: 'db/index.ts',
        content: this.generateUnifiedInterfaceContent(config)
    };
  }

  /**
   * Generate initial migration file content.
   */
  generateInitialMigration(config: DatabasePluginConfig): GeneratedFile {
    return {
        path: 'db/migrations/0001_initial.ts',
        content: this.generateMigrationContent(config)
    };
  }

  /**
   * Generate environment variables.
   */
  generateEnvVars(config: DatabasePluginConfig): Record<string, string> {
      const envVars: Record<string, string> = {};

      // Common database environment variables
      if ('connectionString' in config.connection) {
          envVars.DATABASE_URL = config.connection.connectionString || '';
      }

      if (config.provider === DatabaseProvider.NEON) {
          const neonConfig = config as NeonConfig;
          envVars.NEON_DATABASE_URL = neonConfig.connection.connectionString || '';
          if (neonConfig.connection.region) {
              envVars.NEON_REGION = neonConfig.connection.region;
          }
      }

      if (config.provider === DatabaseProvider.SUPABASE) {
          const supabaseConfig = config as SupabaseConfig;
          envVars.SUPABASE_DATABASE_URL = supabaseConfig.connection.projectUrl || '';
          envVars.SUPABASE_ANON_KEY = supabaseConfig.connection.anonKey || '';
          envVars.SUPABASE_SERVICE_ROLE_KEY = supabaseConfig.connection.serviceRoleKey || '';
      }

      if (config.provider === DatabaseProvider.MONGODB) {
          const mongoConfig = config as MongoDBConfig;
          envVars.MONGO_URI = mongoConfig.connection.connectionString || '';
      }

      return envVars;
  }

  /**
   * Generate package.json scripts.
   */
  generateScripts(config: DatabasePluginConfig): Record<string, string> {
      const scripts: Record<string, string> = {};

      if (config.features && (config.features as any[]).includes(DatabaseFeature.MIGRATIONS)) {
          scripts['db:migrate'] = 'drizzle-kit migrate';
          scripts['db:studio'] = 'drizzle-kit studio';
      }

      return scripts;
  }

  // ============================================================================
  // PRIVATE CONTENT GENERATION METHODS
  // ============================================================================

  private generateDrizzleConfigContent(config: DatabasePluginConfig): string {
    return `import { defineConfig } from 'drizzle-kit';
export default defineConfig({
    schema: './src/lib/db/schema.ts',
    driver: '${this.getDriverForProvider(config.provider)}',
    dbCredentials: {
        connectionString: process.env.DATABASE_URL!,
    },
    tablesFilter: ['!drizzle__*'],
});
`;
  }

  private generateSchemaContent(config: DatabasePluginConfig): string {
    return `// Drizzle schema file
// Generated by The Architech
${this.getSchemaImports(config.provider)}

${this.generateSampleTables(config)}
`;
  }

  private generateConnectionContent(config: DatabasePluginConfig): string {
    return `// Drizzle connection file
// Generated by The Architech
${this.getConnectionImports(config.provider)}

${this.getConnectionSetup(config)}
`;
  }

  private generateUnifiedInterfaceContent(config: DatabasePluginConfig): string {
    return `// Drizzle unified interface
// Generated by The Architech

export * from './schema';
export * from './connection';

import { migrate } from 'drizzle-orm/postgres-js/migrator';
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';

export const runMigrations = async () => {
    const connectionString = process.env.DATABASE_URL;
    if (!connectionString) {
        throw new Error('DATABASE_URL is not set');
    }
    const migrationClient = postgres(connectionString, { max: 1 });
    await migrate(drizzle(migrationClient), { migrationsFolder: './src/lib/db/migrations' });
};
`;
  }

  private generateMigrationContent(config: DatabasePluginConfig): string {
    return `// Drizzle initial migration
// Generated by The Architech

-- Your initial migration SQL goes here
`;
  }

  private generateSampleTables(config: DatabasePluginConfig): string {
    // Add more sample tables based on features
    if (config.features?.seeding) {
      return `
// Additional tables for seeding
export const categories = pgTable('categories', {
  id: serial('id').primaryKey(),
  name: varchar('name', { length: 100 }).notNull(),
  description: text('description'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const tags = pgTable('tags', {
  id: serial('id').primaryKey(),
  name: varchar('name', { length: 50 }).notNull().unique(),
  color: varchar('color', { length: 7 }), // hex color
  createdAt: timestamp('created_at').defaultNow(),
});

export const postTags = pgTable('post_tags', {
  postId: integer('post_id').references(() => posts.id),
  tagId: integer('tag_id').references(() => tags.id),
}, (table) => ({
  pk: primaryKey(table.postId, table.tagId),
}));
`;
    }
    return '';
  }

  private getDriverForProvider(provider: DatabaseProvider): string {
    switch (provider) {
      case DatabaseProvider.NEON:
      case DatabaseProvider.SUPABASE:
        return 'pg';
      case DatabaseProvider.MONGODB:
        return 'mongodb';
      case DatabaseProvider.PLANETSCALE:
        return 'mysql2';
      case DatabaseProvider.LOCAL:
        return 'better-sqlite3';
      default:
        return 'pg';
    }
  }

  private getSchemaImports(provider: DatabaseProvider): string {
    const baseImports = `import { pgTable, serial, varchar, text, timestamp, boolean, integer } from 'drizzle-orm/pg-core';`;

    switch (provider) {
      case DatabaseProvider.NEON:
      case DatabaseProvider.SUPABASE:
        return baseImports;
      case DatabaseProvider.MONGODB:
        return `import { collection, objectId, string, date, boolean } from 'drizzle-orm/mongodb';`;
      case DatabaseProvider.PLANETSCALE:
        return `import { mysqlTable, serial, varchar, text, timestamp, boolean, int } from 'drizzle-orm/mysql-core';`;
      case DatabaseProvider.LOCAL:
        return `import { sqliteTable, integer, text, real } from 'drizzle-orm/sqlite-core';`;
      default:
        return baseImports;
    }
  }

  private getConnectionImports(provider: DatabaseProvider): string {
    switch (provider) {
      case DatabaseProvider.NEON:
        return `import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from '@neondatabase/serverless';`;
      case DatabaseProvider.SUPABASE:
        return `import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';`;
      case DatabaseProvider.MONGODB:
        return `import { drizzle } from 'drizzle-orm/mongodb';
import { MongoClient } from 'mongodb';`;
      case DatabaseProvider.PLANETSCALE:
        return `import { drizzle } from 'drizzle-orm/planetscale-serverless';
import { connect } from '@planetscale/database';`;
      case DatabaseProvider.LOCAL:
        return `import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';`;
      default:
        return `import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';`;
    }
  }

  private getConnectionSetup(config: DatabasePluginConfig): string {
    switch (config.provider) {
      case DatabaseProvider.NEON:
        return `drizzle(neon(process.env.NEON_DATABASE_URL!));`;
      case DatabaseProvider.SUPABASE:
        return `drizzle(postgres(process.env.SUPABASE_URL!, {
  ssl: 'require',
}));`;
      case DatabaseProvider.MONGODB:
        return `drizzle(new MongoClient(process.env.MONGODB_URI!).connect());`;
      case DatabaseProvider.PLANETSCALE:
        return `drizzle(connect({
  url: process.env.DATABASE_URL!,
}));`;
      case DatabaseProvider.LOCAL:
        return `drizzle(new Database('local.db'));`;
      default:
        return `drizzle(postgres(process.env.DATABASE_URL!));`;
    }
  }
} 