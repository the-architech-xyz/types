import { ResendConfig } from './ResendSchema.js';

export class ResendGenerator {
  static generateEmailClient(config: ResendConfig): string {
    return `import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

if (!process.env.RESEND_API_KEY) {
  throw new Error('Missing RESEND_API_KEY environment variable');
}

export default resend;
`;
  }

  static generateEmailConfig(config: ResendConfig): string {
    return `/**
 * Email Configuration
 * Generated by The Architech Resend Plugin
 */

export interface EmailConfig {
  fromEmail: string;
  fromName?: string;
  replyTo?: string;
  webhookUrl?: string;
  sandboxMode: boolean;
  templates: {
    welcome: boolean;
    verification: boolean;
    resetPassword: boolean;
    notification: boolean;
    marketing: boolean;
  };
  features: {
    analytics: boolean;
    webhooks: boolean;
    templates: boolean;
    validation: boolean;
  };
}

export const emailConfig: EmailConfig = {
  fromEmail: process.env.EMAIL_FROM || '${config.fromEmail || 'noreply@example.com'}',
  fromName: process.env.EMAIL_FROM_NAME || '${config.fromName || 'Your App'}',
  replyTo: process.env.EMAIL_REPLY_TO || '${config.replyTo || ''}',
  webhookUrl: process.env.EMAIL_WEBHOOK_URL || '${config.webhookUrl || ''}',
  sandboxMode: process.env.NODE_ENV === 'development' || ${config.sandboxMode || true},
  templates: {
    welcome: ${config.templates?.welcome || true},
    verification: ${config.templates?.verification || true},
    resetPassword: ${config.templates?.resetPassword || true},
    notification: ${config.templates?.notification || true},
    marketing: ${config.templates?.marketing || false}
  },
  features: {
    analytics: ${config.features?.analytics || true},
    webhooks: ${config.features?.webhooks || true},
    templates: ${config.features?.templates || true},
    validation: ${config.features?.validation || true}
  }
};

export default emailConfig;
`;
  }

  static generateEmailTypes(): string {
    return `import { Resend } from 'resend';

// Email types
export interface EmailData {
  to: string | string[];
  subject: string;
  html?: string;
  text?: string;
  from?: string;
  replyTo?: string;
  cc?: string[];
  bcc?: string[];
  attachments?: EmailAttachment[];
  headers?: Record<string, string>;
}

export interface EmailAttachment {
  filename: string;
  content: Buffer | string;
  contentType?: string;
}

export interface EmailTemplate {
  id: string;
  name: string;
  subject: string;
  html: string;
  text?: string;
  variables: string[];
}

export interface EmailSendResult {
  id: string;
  from: string;
  to: string[];
  subject: string;
  status: 'sent' | 'failed' | 'pending';
  createdAt: string;
}

export interface EmailEvent {
  type: 'delivered' | 'bounced' | 'complained' | 'unsubscribed' | 'opened' | 'clicked';
  email: string;
  timestamp: string;
  data?: any;
}

// Template variables
export interface WelcomeEmailData {
  name: string;
  email: string;
  verificationUrl?: string;
}

export interface VerificationEmailData {
  name: string;
  email: string;
  verificationUrl: string;
  expiresIn: string;
}

export interface ResetPasswordEmailData {
  name: string;
  email: string;
  resetUrl: string;
  expiresIn: string;
}

export interface NotificationEmailData {
  name: string;
  email: string;
  title: string;
  message: string;
  actionUrl?: string;
  actionText?: string;
}
`;
  }

  static generateEmailService(): string {
    return `import resend from './resend.js';
import emailConfig from './config.js';
import type { EmailData, EmailSendResult, EmailTemplate } from './types.js';

export class EmailService {
  private resend: typeof resend;
  private config: typeof emailConfig;

  constructor() {
    this.resend = resend;
    this.config = emailConfig;
  }

  async sendEmail(data: EmailData): Promise<EmailSendResult> {
    try {
      const result = await this.resend.emails.send({
        from: data.from || this.config.fromEmail,
        to: Array.isArray(data.to) ? data.to : [data.to],
        subject: data.subject,
        html: data.html,
        text: data.text,
        reply_to: data.replyTo || this.config.replyTo,
        cc: data.cc,
        bcc: data.bcc,
        attachments: data.attachments,
        headers: data.headers
      });

      return {
        id: result.data?.id || '',
        from: data.from || this.config.fromEmail,
        to: Array.isArray(data.to) ? data.to : [data.to],
        subject: data.subject,
        status: 'sent',
        createdAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('Failed to send email:', error);
      throw error;
    }
  }

  async sendTemplate(templateId: string, data: any): Promise<EmailSendResult> {
    try {
      const result = await this.resend.emails.send({
        from: this.config.fromEmail,
        to: data.to,
        subject: data.subject,
        react: data.react,
        html: data.html,
        text: data.text
      });

      return {
        id: result.data?.id || '',
        from: this.config.fromEmail,
        to: Array.isArray(data.to) ? data.to : [data.to],
        subject: data.subject,
        status: 'sent',
        createdAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('Failed to send template email:', error);
      throw error;
    }
  }

  async validateEmail(email: string): Promise<boolean> {
    // Basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  async getEmailStatus(emailId: string): Promise<any> {
    try {
      // Note: Resend doesn't provide a direct API to get email status
      // This would need to be implemented with webhooks
      return { status: 'unknown', id: emailId };
    } catch (error) {
      console.error('Failed to get email status:', error);
      throw error;
    }
  }
}

export const emailService = new EmailService();
export default emailService;
`;
  }

  static generateEnvConfig(config: ResendConfig): string {
    return `# Resend Email Configuration
RESEND_API_KEY="${config.apiKey || 'your-resend-api-key'}"

# Email Settings
EMAIL_FROM="${config.fromEmail || 'noreply@yourdomain.com'}"
EMAIL_FROM_NAME="${config.fromName || 'Your App'}"
EMAIL_REPLY_TO="${config.replyTo || 'support@yourdomain.com'}"

# Webhook Configuration
EMAIL_WEBHOOK_URL="${config.webhookUrl || ''}"

# Feature Flags
RESEND_SANDBOX_MODE="${config.sandboxMode ? 'true' : 'false'}"
RESEND_ENABLE_ANALYTICS="${config.features?.analytics !== false ? 'true' : 'false'}"
RESEND_ENABLE_WEBHOOKS="${config.features?.webhooks !== false ? 'true' : 'false'}"
RESEND_ENABLE_TEMPLATES="${config.features?.templates !== false ? 'true' : 'false'}"
RESEND_ENABLE_VALIDATION="${config.features?.validation !== false ? 'true' : 'false'}"

# Delivery Settings
RESEND_RETRY_ATTEMPTS="${config.delivery?.retryAttempts || 3}"
RESEND_RETRY_DELAY="${config.delivery?.retryDelay || 60}"
RESEND_TIMEOUT="${config.delivery?.timeout || 30}"
RESEND_PRIORITY="${config.delivery?.priority || 'normal'}"
RESEND_BATCH_SIZE="${config.delivery?.batchSize || 100}"

# Security Settings
RESEND_ENABLE_DKIM="${config.security?.enableDKIM !== false ? 'true' : 'false'}"
RESEND_ENABLE_SPF="${config.security?.enableSPF !== false ? 'true' : 'false'}"
RESEND_ENABLE_DMARC="${config.security?.enableDMARC !== false ? 'true' : 'false'}"
RESEND_ENABLE_TLS="${config.security?.enableTLS !== false ? 'true' : 'false'}"

# Analytics Settings
RESEND_ENABLE_OPEN_TRACKING="${config.analytics?.enableOpenTracking !== false ? 'true' : 'false'}"
RESEND_ENABLE_CLICK_TRACKING="${config.analytics?.enableClickTracking !== false ? 'true' : 'false'}"
RESEND_ENABLE_UNSUBSCRIBE_TRACKING="${config.analytics?.enableUnsubscribeTracking !== false ? 'true' : 'false'}"

# Rate Limiting
RESEND_MAX_EMAILS_PER_SECOND="${config.rateLimiting?.maxEmailsPerSecond || 10}"
RESEND_MAX_EMAILS_PER_MINUTE="${config.rateLimiting?.maxEmailsPerMinute || 600}"
RESEND_MAX_EMAILS_PER_HOUR="${config.rateLimiting?.maxEmailsPerHour || 36000}"
`;
  }

  static generatePackageJson(config: ResendConfig): string {
    const dependencies: Record<string, string> = {
      'resend': '^3.1.0'
    };
    
    // Add optional dependencies based on features
    if (config.features?.templates) {
      dependencies['@react-email/components'] = '^0.0.15';
      dependencies['@react-email/render'] = '^0.0.12';
    }
    
    return JSON.stringify({
      name: 'resend-email',
      version: '0.1.0',
      private: true,
      scripts: {
        'email:test': 'node -e \"require(\'./src/lib/email/service.js\').emailService.sendEmail({to:\'test@example.com\',subject:\'Test\',html:\'<h1>Test</h1>\'})\"',
        'email:validate': 'node -e \"require(\'./src/lib/email/service.js\').emailService.validateEmail(\'test@example.com\')\"',
        'email:webhook': 'npx resend webhook:listen'
      },
      dependencies
    }, null, 2);
  }

  static generateReadme(): string {
    return `# Resend Email Setup

This project uses Resend for modern email delivery with excellent TypeScript support.

## Features

- **Developer-First API**: Simple and intuitive email API
- **TypeScript Support**: Full TypeScript support with type safety
- **Webhooks**: Real-time email event notifications
- **Analytics**: Email open, click, and delivery tracking
- **Templates**: React-based email templates
- **Validation**: Email address validation
- **Security**: DKIM, SPF, and DMARC support

## Configuration

The Resend email service is configured in \`src/lib/email/config.ts\`. Key settings:

- **API Key**: Set via \`RESEND_API_KEY\` environment variable
- **From Email**: Set via \`EMAIL_FROM\` environment variable
- **Webhooks**: Configure webhook URL for email events
- **Sandbox Mode**: Enable for testing in development

## Environment Variables

Required:
- \`RESEND_API_KEY\`: Your Resend API key
- \`EMAIL_FROM\`: Default sender email address

Optional:
- \`EMAIL_FROM_NAME\`: Default sender name
- \`EMAIL_REPLY_TO\`: Reply-to email address
- \`EMAIL_WEBHOOK_URL\`: Webhook URL for email events
- \`RESEND_SANDBOX_MODE\`: Enable sandbox mode for testing

## Usage

\`\`\`typescript
import { emailService } from '@/lib/email/service';

// Send a simple email
await emailService.sendEmail({
  to: 'user@example.com',
  subject: 'Welcome!',
  html: '<h1>Welcome to our app!</h1>'
});

// Send with template
await emailService.sendTemplate('welcome', {
  to: 'user@example.com',
  subject: 'Welcome!',
  react: WelcomeEmail({ name: 'John' })
});

// Validate email
const isValid = await emailService.validateEmail('user@example.com');
\`\`\`

## Available Scripts

- \`npm run email:test\` - Test email sending
- \`npm run email:validate\` - Validate email addresses
- \`npm run email:webhook\` - Listen for webhook events

## Best Practices

1. **API Key Security**: Never commit API keys to version control
2. **Email Validation**: Always validate email addresses before sending
3. **Rate Limiting**: Respect rate limits to avoid throttling
4. **Webhooks**: Use webhooks for real-time event tracking
5. **Templates**: Use React Email templates for consistent design
6. **Testing**: Use sandbox mode for development and testing

## Troubleshooting

### API Key Issues
- Verify \`RESEND_API_KEY\` is correct
- Check API key permissions
- Ensure domain is verified in Resend dashboard

### Delivery Issues
- Check sender domain verification
- Verify SPF, DKIM, and DMARC records
- Monitor bounce and spam reports

### Webhook Issues
- Verify webhook URL is accessible
- Check webhook signature validation
- Monitor webhook delivery logs
`;
  }
} 